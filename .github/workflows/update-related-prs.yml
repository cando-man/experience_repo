name: Update Related PRs with Design Docs

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
      - develop/*
      - release/*
      - hotfix/*

jobs:
  update-design-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout codegit swit
        uses: actions/checkout@v4

      - name: Get Merged PR Details
        id: get_pr_details
        uses: actions/github-script@v7
        with:
          script: |
            // ユーティリティ関数の定義
            async function getPRFromContext(github, context) {
              if (typeof context === 'undefined') {
                console.error('context object is undefined');
                return null;
              }
              
              let pr = null;
              
              if (context.payload && context.payload.pull_request) {
                pr = context.payload.pull_request;
                console.log('Using context.payload.pull_request');
              } else if (github.event && github.event.pull_request) {
                pr = github.event.pull_request;
                console.log('Using github.event.pull_request');
              } else {
                console.log('PR object not found in event, trying to get from API');
                try {
                  const prNumber = context.issue.number;
                  if (!prNumber) {
                    throw new Error('PR number not found in context');
                  }
                  const { data: prData } = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                  });
                  pr = prData;
                  console.log('Retrieved PR from API');
                } catch (error) {
                  console.error('Failed to get PR from API:', error);
                  return null;
                }
              }
              
              return pr;
            }
            
            function extractDesignDocs(prBody) {
              console.log('=== DESIGN DOC EXTRACTION DEBUG ===');
              console.log('Looking for design doc section...');
              
              let docSectionMatch = null;
              const patterns = [
                /##\s*[^\r\n]*設計書一覧\r?\n([\s\S]*?)(?=\r?\n##|\r?\n---|$)/,
                /#\s*[^\r\n]*設計書一覧\r?\n([\s\S]*?)(?=\r?\n#|\r?\n---|$)/,
                /設計書一覧\r?\n([\s\S]*?)(?=\r?\n##|\r?\n#|\r?\n---|$)/
              ];
              
              for (let i = 0; i < patterns.length; i++) {
                const pattern = patterns[i];
                console.log(`Trying pattern ${i + 1}:`, pattern);
                docSectionMatch = prBody.match(pattern);
                if (docSectionMatch) {
                  console.log(`Pattern ${i + 1} matched!`);
                  break;
                }
              }
              
              console.log('docSectionMatch:', docSectionMatch);
              
              let designDocs = [];
              
              if (docSectionMatch) {
                console.log('Found design doc section:', docSectionMatch[1]);
                
                console.log('=== DESIGN DOC SECTION DEBUG ===');
                console.log('Section content length:', docSectionMatch[1].length);
                const sectionLines = docSectionMatch[1].split('\n');
                console.log('Section lines count:', sectionLines.length);
                
                console.log('=== LINK EXTRACTION DEBUG ===');
                const linkPattern = /\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g;
                console.log('Looking for links with pattern:', linkPattern);
                
                const links = docSectionMatch[1].match(linkPattern);
                console.log('Found links:', links);
                
                if (links) {
                  designDocs = links.map(link => link.trim());
                  console.log('Processed design docs:', designDocs);
                } else {
                  console.log('No links found in section');
                  
                  console.log('Trying alternative link patterns...');
                  
                  const altPattern1 = /\*.*?https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g;
                  const altLinks1 = docSectionMatch[1].match(altPattern1);
                  console.log('Alternative pattern 1 result:', altLinks1);
                  
                  const googleSheetLines = sectionLines.filter(line => line.includes('docs.google.com/spreadsheets'));
                  console.log('Lines containing Google Sheets links:', googleSheetLines);
                }
              } else {
                console.log('No design doc section found');
                console.log('Trying alternative patterns...');
                
                const altMatch1 = prBody.match(/#\s*設計書一覧[\s\S]*?(?=\r?\n#|\r?\n---|$)/);
                console.log('Alternative pattern 1 result:', altMatch1);
                
                if (altMatch1) {
                  console.log('Using alternative pattern result');
                  const links = altMatch1[0].match(/\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g);
                  if (links) {
                    designDocs = links.map(link => link.trim());
                    console.log('Found links from alternative pattern:', designDocs);
                  }
                } else {
                  const lines = prBody.split('\n');
                  console.log('Total lines in PR body:', lines.length);
                  
                  const designDocLines = lines.filter(line => line.includes('設計書一覧'));
                  console.log('Lines containing "設計書一覧":', designDocLines.length);
                }
              }
              
              return designDocs;
            }
            
            // メイン処理
            async function getMergedPRDetails() {
              try {
                console.log('=== GETTING PR DETAILS ===');
                
                const pr = await getPRFromContext(github, context);
                if (!pr) {
                  core.setFailed('Could not retrieve pull request information');
                  return;
                }
                
                const prBody = pr.body || '';
                const baseBranch = pr.base.ref;
                
                console.log('PR Number:', pr.number);
                console.log('PR Body Length:', prBody.length);
                console.log('Base Branch:', baseBranch);
                console.log('PR Merged:', pr.merged);
                
                if (!pr.merged) {
                  console.log('PR is not merged. Skipping processing.');
                  core.setOutput('design_docs', JSON.stringify([]));
                  core.setOutput('base_branch', baseBranch);
                  core.setOutput('merged_pr_number', pr.number.toString());
                  return;
                }
                
                const designDocs = extractDesignDocs(prBody);
                console.log('Extracted Design Docs:', designDocs);
                
                core.setOutput('design_docs', JSON.stringify(designDocs));
                core.setOutput('base_branch', baseBranch);
                core.setOutput('merged_pr_number', pr.number.toString());
                
              } catch (error) {
                console.error('Error in Get Merged PR Details:', error);
                core.setFailed('Failed to get PR details: ' + error.message);
              }
            }
            
            await getMergedPRDetails();

      - name: Find All Open PRs to the Same Base Branch
        id: find_all_open_prs
        uses: actions/github-script@v7
        with:
          script: |
            // ユーティリティ関数の定義
            async function findOpenPRsToBaseBranch(github, context, baseBranch, mergedPrNumber) {
              const { data: openPRs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${baseBranch}`,
                sort: 'created',
                direction: 'desc'
              });
              
              console.log('Found open PRs with head branch:', openPRs.length);
              
              const targetPRs = openPRs.filter(pr => pr.number != mergedPrNumber);
              
              return targetPRs;
            }
            
            // メイン処理
            async function findOpenPRs() {
              try {
                console.log('=== FINDING OPEN PRS ===');
                
                const baseBranch = process.env.base_branch;
                const mergedPrNumber = process.env.merged_pr_number;
                
                console.log('Base Branch:', baseBranch);
                console.log('Merged PR Number:', mergedPrNumber);
                
                if (!baseBranch) {
                  core.setFailed('Base branch is required');
                  return;
                }
                
                const targetPRs = await findOpenPRsToBaseBranch(github, context, baseBranch, mergedPrNumber);
                const targetPrNumbers = targetPRs.map(pr => pr.number);
                
                console.log('Target PRs (excluding merged PR):', targetPrNumbers.length);
                targetPRs.forEach(pr => {
                  console.log(`- PR #${pr.number}: ${pr.title} (base: ${pr.base.ref}, head: ${pr.head.ref})`);
                });
                
                core.setOutput('target_pr_numbers', JSON.stringify(targetPrNumbers));
                
              } catch (error) {
                console.error('Error in Find Open PRs:', error);
                core.setFailed('Failed to find open PRs: ' + error.message);
              }
            }
            
            await findOpenPRs();
        env:
          base_branch: ${{ steps.get_pr_details.outputs.base_branch }}
          merged_pr_number: ${{ steps.get_pr_details.outputs.merged_pr_number }}

      - name: Update Target PR Descriptions
        if: steps.find_all_open_prs.outputs.target_pr_numbers != '[]' && steps.find_all_open_prs.outputs.target_pr_numbers != 'null'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // ユーティリティ関数の定義
            async function updatePRWithDesignDocs(github, context, targetPrNumbers, designDocs) {
              const designDocSection = `\n\n## 設計書一覧\n\n${designDocs.join('\n')}`;
              
              let successCount = 0;
              let errorCount = 0;
              
              for (const prNumber of targetPrNumbers) {
                try {
                  console.log(`Updating PR #${prNumber}...`);
                  
                  const { data: pr } = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber
                  });
                  
                  let newBody = pr.body || '';
                  
                  if (newBody.includes('## 設計書一覧')) {
                    console.log(`PR #${prNumber} already has design doc section, adding to existing section`);
                    
                    const designDocLines = designDocs.map(doc => doc.trim());
                    const existingDesignDocs = [];
                    
                    const existingMatch = newBody.match(/##\s*設計書一覧\r?\n([\s\S]*?)(?=\r?\n##|\r?\n---|$)/);
                    if (existingMatch) {
                      const existingSection = existingMatch[1];
                      const existingLinks = existingSection.match(/\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g);
                      if (existingLinks) {
                        existingDesignDocs.push(...existingLinks.map(link => link.trim()));
                      }
                    }
                    
                    const allDesignDocs = [...new Set([...existingDesignDocs, ...designDocLines])];
                    
                    const newDesignDocSection = `## 設計書一覧\n\n${allDesignDocs.join('\n')}`;
                    newBody = newBody.replace(/##\s*設計書一覧\r?\n[\s\S]*?(?=\r?\n##|\r?\n---|$)/, newDesignDocSection);
                  } else {
                    newBody += designDocSection;
                  }
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    body: newBody
                  });
                  
                  console.log(`Successfully updated PR #${prNumber}`);
                  successCount++;
                  
                } catch (error) {
                  console.error(`Error updating PR #${prNumber}:`, error.message);
                  errorCount++;
                }
              }
              
              return { successCount, errorCount };
            }
            
            // メイン処理
            async function updatePRDescriptions() {
              try {
                console.log('=== UPDATING PR DESCRIPTIONS ===');
                
                const targetPrNumbersStr = process.env.target_pr_numbers || '[]';
                const designDocsStr = process.env.design_docs || '[]';
                
                const targetPrNumbers = JSON.parse(targetPrNumbersStr);
                const designDocs = JSON.parse(designDocsStr);
                
                console.log('Target PR Numbers:', targetPrNumbers);
                console.log('Design Docs:', designDocs);
                
                if (!Array.isArray(targetPrNumbers) || targetPrNumbers.length === 0) {
                  console.log('No target PRs to update');
                  return;
                }
                
                if (!Array.isArray(designDocs) || designDocs.length === 0) {
                  console.log('No design docs to add');
                  return;
                }
                
                const result = await updatePRWithDesignDocs(github, context, targetPrNumbers, designDocs);
                console.log(`PR description updates completed. Success: ${result.successCount}, Errors: ${result.errorCount}`);
                
                if (result.errorCount > 0) {
                  console.warn(`Warning: ${result.errorCount} PR(s) failed to update`);
                }
                
              } catch (error) {
                console.error('Error in Update PR Descriptions:', error);
                core.setFailed('Failed to update PR descriptions: ' + error.message);
              }
            }
            
            await updatePRDescriptions();
        env:
          target_pr_numbers: ${{ steps.find_all_open_prs.outputs.target_pr_numbers }}
          design_docs: ${{ steps.get_pr_details.outputs.design_docs }}