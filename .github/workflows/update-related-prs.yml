name: Update Related PRs with Design Docs

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
      - develop/*
      - release/*
      - hotfix/*

jobs:
  update-design-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Merged PR Details
        id: get_pr_details
        uses: actions/github-script@v7
        with:
          script: |
            const { extractDesignDocs, getPRFromContext } = require('./scripts/pr-utils');
            
            async function getMergedPRDetails() {
              try {
                console.log('=== GETTING PR DETAILS ===');
                
                const pr = await getPRFromContext(github, context);
                if (!pr) {
                  core.setFailed('Could not retrieve pull request information');
                  return;
                }
                
                const prBody = pr.body || '';
                const baseBranch = pr.base.ref;
                
                console.log('PR Number:', pr.number);
                console.log('PR Body Length:', prBody.length);
                console.log('Base Branch:', baseBranch);
                console.log('PR Merged:', pr.merged);
                
                // マージされていない場合は処理をスキップ
                if (!pr.merged) {
                  console.log('PR is not merged. Skipping processing.');
                  core.setOutput('design_docs', JSON.stringify([]));
                  core.setOutput('base_branch', baseBranch);
                  core.setOutput('merged_pr_number', pr.number.toString());
                  return;
                }
                
                const designDocs = extractDesignDocs(prBody);
                console.log('Extracted Design Docs:', designDocs);
                
                core.setOutput('design_docs', JSON.stringify(designDocs));
                core.setOutput('base_branch', baseBranch);
                core.setOutput('merged_pr_number', pr.number.toString());
                
              } catch (error) {
                console.error('Error in Get Merged PR Details:', error);
                core.setFailed('Failed to get PR details: ' + error.message);
              }
            }
            
            await getMergedPRDetails();

      - name: Find All Open PRs to the Same Base Branch
        id: find_all_open_prs
        uses: actions/github-script@v7
        with:
          script: |
            const { findOpenPRsToBaseBranch } = require('./scripts/pr-utils');
            
            async function findOpenPRs() {
              try {
                console.log('=== FINDING OPEN PRS ===');
                
                const baseBranch = process.env.base_branch;
                const mergedPrNumber = process.env.merged_pr_number;
                
                console.log('Base Branch:', baseBranch);
                console.log('Merged PR Number:', mergedPrNumber);
                
                if (!baseBranch) {
                  core.setFailed('Base branch is required');
                  return;
                }
                
                const targetPRs = await findOpenPRsToBaseBranch(github, context, baseBranch, mergedPrNumber);
                const targetPrNumbers = targetPRs.map(pr => pr.number);
                
                console.log('Target PRs (excluding merged PR):', targetPrNumbers.length);
                targetPRs.forEach(pr => {
                  console.log(`- PR #${pr.number}: ${pr.title} (base: ${pr.base.ref}, head: ${pr.head.ref})`);
                });
                
                core.setOutput('target_pr_numbers', JSON.stringify(targetPrNumbers));
                
              } catch (error) {
                console.error('Error in Find Open PRs:', error);
                core.setFailed('Failed to find open PRs: ' + error.message);
              }
            }
            
            await findOpenPRs();
        env:
          base_branch: ${{ steps.get_pr_details.outputs.base_branch }}
          merged_pr_number: ${{ steps.get_pr_details.outputs.merged_pr_number }}

      - name: Update Target PR Descriptions
        if: steps.find_all_open_prs.outputs.target_pr_numbers != '[]' && steps.find_all_open_prs.outputs.target_pr_numbers != 'null'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { updatePRWithDesignDocs } = require('./scripts/pr-utils');
            
            async function updatePRDescriptions() {
              try {
                console.log('=== UPDATING PR DESCRIPTIONS ===');
                
                const targetPrNumbersStr = process.env.target_pr_numbers || '[]';
                const designDocsStr = process.env.design_docs || '[]';
                
                const targetPrNumbers = JSON.parse(targetPrNumbersStr);
                const designDocs = JSON.parse(designDocsStr);
                
                console.log('Target PR Numbers:', targetPrNumbers);
                console.log('Design Docs:', designDocs);
                
                if (!Array.isArray(targetPrNumbers) || targetPrNumbers.length === 0) {
                  console.log('No target PRs to update');
                  return;
                }
                
                if (!Array.isArray(designDocs) || designDocs.length === 0) {
                  console.log('No design docs to add');
                  return;
                }
                
                const result = await updatePRWithDesignDocs(github, context, targetPrNumbers, designDocs);
                console.log(`PR description updates completed. Success: ${result.successCount}, Errors: ${result.errorCount}`);
                
                if (result.errorCount > 0) {
                  console.warn(`Warning: ${result.errorCount} PR(s) failed to update`);
                }
                
              } catch (error) {
                console.error('Error in Update PR Descriptions:', error);
                core.setFailed('Failed to update PR descriptions: ' + error.message);
              }
            }
            
            await updatePRDescriptions();
        env:
          target_pr_numbers: ${{ steps.find_all_open_prs.outputs.target_pr_numbers }}
          design_docs: ${{ steps.get_pr_details.outputs.design_docs }}