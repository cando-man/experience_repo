name: Update Related PRs with Design Docs

on:
  pull_request:
    types: [closed]
    branches:
      # 設計書リンクを共有したいPRのベースブランチを指定します。
      # 例: 'main', 'develop', 'release/*' など、運用に合わせて追加・変更してください。
      - main
      - develop
      - develop/*
      - release/*
      - hotfix/*

jobs:
  update-design-docs:
    # 条件チェックはスクリプト内で行う
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # PRの更新に必要なパーミッション

    steps:
      - name: Get Merged PR Details
        id: get_pr_details
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('=== GETTING PR DETAILS ===');
              
              // contextオブジェクトの存在確認
              if (typeof context === 'undefined') {
                console.error('context object is undefined');
                core.setFailed('context object is not available');
                return;
              }
              
              // 複数の方法でPRオブジェクトを取得
              let pr = null;
              
              // 方法1: context.payload.pull_request (推奨)
              if (context.payload && context.payload.pull_request) {
                pr = context.payload.pull_request;
                console.log('Using context.payload.pull_request');
              }
              // 方法2: github.event.pull_request (フォールバック)
              else if (github.event && github.event.pull_request) {
                pr = github.event.pull_request;
                console.log('Using github.event.pull_request');
              }
              // 方法3: APIを使用してPRを取得
              else {
                console.log('PR object not found in event, trying to get from API');
                try {
                  const prNumber = context.issue.number;
                  const { data: prData } = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                  });
                  pr = prData;
                  console.log('Retrieved PR from API');
                } catch (error) {
                  console.error('Failed to get PR from API:', error);
                  core.setFailed('Could not retrieve pull request information');
                  return;
                }
              }
              
              if (!pr) {
                console.error('Pull request object not found');
                core.setFailed('Pull request object is undefined');
                return;
              }
              
              const prBody = pr.body || ''; // マージされたPRの説明文を取得
              const baseBranch = pr.base.ref; // マージされたPRのベースブランチを取得
              
              console.log('PR Number:', pr.number);
              console.log('PR Body:', prBody);
              console.log('Base Branch:', baseBranch);
              console.log('PR Merged:', pr.merged);
              
              // マージされていない場合は処理をスキップ
              if (!pr.merged) {
                console.log('PR is not merged. Skipping processing.');
                core.setOutput('design_docs', JSON.stringify([]));
                core.setOutput('base_branch', baseBranch);
                core.setOutput('merged_pr_number', pr.number);
                return;
              }
              
              // 設計書一覧セクションを正規表現で抽出
              // `## 任意の文字 + 設計書一覧` または `# 任意の文字 + 設計書一覧` の後から、次の見出しまたはPRの終わりまでを対象とします。
              // 絵文字や特殊文字は `[^\n]*` で無視します。
              console.log('=== DESIGN DOC EXTRACTION DEBUG ===');
              console.log('Looking for design doc section...');
              
              // 複数のパターンを試す
              let docSectionMatch = null;
              const patterns = [
                /##\s*[^\n]*設計書一覧\n([\s\S]*?)(?=\n##|\n---|$)/,  // ## 任意の文字 + 設計書一覧
                /#\s*[^\n]*設計書一覧\n([\s\S]*?)(?=\n#|\n---|$)/,    // # 任意の文字 + 設計書一覧
                /設計書一覧\n([\s\S]*?)(?=\n##|\n#|\n---|$)/      // 設計書一覧（より緩い）
              ];
              
              for (let i = 0; i < patterns.length; i++) {
                const pattern = patterns[i];
                console.log(`Trying pattern ${i + 1}:`, pattern);
                docSectionMatch = prBody.match(pattern);
                if (docSectionMatch) {
                  console.log(`Pattern ${i + 1} matched!`);
                  break;
                }
              }
              
              console.log('docSectionMatch:', docSectionMatch);
              
              if (docSectionMatch) {
                console.log('Found design doc section:', docSectionMatch[1]);
                
                // 設計書セクションの内容を詳しく確認
                console.log('=== DESIGN DOC SECTION DEBUG ===');
                console.log('Section content:');
                console.log('"' + docSectionMatch[1] + '"');
                console.log('Section content (split by lines):');
                const sectionLines = docSectionMatch[1].split('\n');
                sectionLines.forEach((line, index) => {
                  console.log(`${index}: "${line}"`);
                });
                
                // リンク抽出のデバッグ
                console.log('=== LINK EXTRACTION DEBUG ===');
                const linkPattern = /\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g;
                console.log('Looking for links with pattern:', linkPattern);
                
                const links = docSectionMatch[1].match(linkPattern);
                console.log('Found links:', links);
                
                if (links) {
                  designDocs = links.map(link => link.trim());
                  console.log('Processed design docs:', designDocs);
                } else {
                  console.log('No links found in section');
                  
                  // 代替パターンを試す
                  console.log('Trying alternative link patterns...');
                  
                  // パターン1: より緩いマッチング
                  const altPattern1 = /\*.*?https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g;
                  const altLinks1 = docSectionMatch[1].match(altPattern1);
                  console.log('Alternative pattern 1 result:', altLinks1);
                  
                  // パターン2: 行単位でGoogleスプレッドシートのリンクを探す
                  const googleSheetLines = sectionLines.filter(line => line.includes('docs.google.com/spreadsheets'));
                  console.log('Lines containing Google Sheets links:', googleSheetLines);
                }
              } else {
                console.log('No design doc section found');
                // 代替パターンを試す
                console.log('Trying alternative patterns...');
                
                // パターン1: より緩いマッチング
                const altMatch1 = prBody.match(/#\s*設計書一覧[\s\S]*?(?=\n#|\n---|$)/);
                console.log('Alternative pattern 1 result:', altMatch1);
                
                // パターン2: 行単位での検索
                const lines = prBody.split('\n');
                console.log('All lines in PR body:');
                lines.forEach((line, index) => {
                  console.log(`${index}: "${line}"`);
                });
                
                // パターン3: 設計書一覧を含む行を探す
                const designDocLines = lines.filter(line => line.includes('設計書一覧'));
                console.log('Lines containing "設計書一覧":', designDocLines);
              }
              
              let designDocs = [];
              if (docSectionMatch && docSectionMatch[1]) {
                  // Googleスプレッドシートのリンク（`* [タイトル](https://docs.google.com/spreadsheets/d/...)` 形式）を抽出
                  const links = docSectionMatch[1].match(/\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g);
                  if (links) {
                      designDocs = links.map(link => link.trim());
                  }
              }
              
              console.log('Extracted Design Docs:', designDocs);
              console.log('Base Branch of Merged PR:', baseBranch);
              core.setOutput('design_docs', JSON.stringify(designDocs));
              core.setOutput('base_branch', baseBranch);
              core.setOutput('merged_pr_number', pr.number); // マージされたPR自身の番号
              
            } catch (error) {
              console.error('Error in Get Merged PR Details:', error);
              console.error('Error stack:', error.stack);
              core.setFailed('Failed to get PR details: ' + error.message);
            }

      - name: Find All Open PRs to the Same Base Branch
        id: find_all_open_prs
        uses: actions/github-script@v7
        with:
          script: |
            const baseBranch = process.env.base_branch;
            const mergedPrNumber = parseInt(process.env.merged_pr_number);

            console.log('=== FINDING OPEN PRS DEBUG ===');
            console.log('Base branch (merged PR):', baseBranch);
            console.log('Merged PR number:', mergedPrNumber);
            console.log('Looking for PRs that use this branch as head branch');

            if (!baseBranch) {
              console.log('Base branch not found. Skipping finding open PRs.');
              core.setOutput('target_pr_numbers', JSON.stringify([]));
              return;
            }

            // develop/testをヘッドブランチとして使用しているオープンなPRを取得
            console.log('Fetching open PRs that use develop/test as head branch');
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open', // オープンなPRのみ
              per_page: 100 // 一度に取得するPRの最大数（必要に応じて調整）
            });
            
            // develop/testをヘッドブランチとして使用しているPRをフィルタリング
            const targetPulls = pulls.filter(pr => pr.head.ref === baseBranch);
            
            console.log('Total open PRs found:', pulls.length);
            console.log('All open PRs:');
            pulls.forEach(pr => {
              console.log(`- PR #${pr.number}: ${pr.title} (base: ${pr.base.ref}, head: ${pr.head.ref})`);
            });
            
            console.log(`PRs using ${baseBranch} as head branch:`, targetPulls.length);
            targetPulls.forEach(pr => {
              console.log(`- PR #${pr.number}: ${pr.title} (base: ${pr.base.ref}, head: ${pr.head.ref})`);
            });
            
            // デバッグ: PR #12の詳細を確認
            console.log('=== DEBUG: Checking PR #12 ===');
            try {
              const { data: pr12 } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: 12,
              });
              console.log(`PR #12 details:`);
              console.log(`- Title: ${pr12.title}`);
              console.log(`- State: ${pr12.state}`);
              console.log(`- Base: ${pr12.base.ref}`);
              console.log(`- Head: ${pr12.head.ref}`);
              console.log(`- Merged: ${pr12.merged}`);
              console.log(`- Closed at: ${pr12.closed_at}`);
            } catch (error) {
              console.log(`PR #12 not found or error: ${error.message}`);
            }
            
            // デバッグ: すべてのPRの状況を確認
            console.log('=== DEBUG: All PRs in repository ===');
            try {
              const { data: allPulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all', // すべてのPR（オープン・クローズ）
                per_page: 100
              });
              console.log('All PRs in repository:');
              allPulls.forEach(pr => {
                console.log(`- PR #${pr.number}: ${pr.title} (state: ${pr.state}, base: ${pr.base.ref}, head: ${pr.head.ref}, merged: ${pr.merged})`);
              });
            } catch (error) {
              console.log(`Error fetching all PRs: ${error.message}`);
            }
            
            // マージされたPR自身も含めて、すべてのオープンなPRを更新対象とする
            const targetPrNumbers = targetPulls.map(pr => pr.number);
            
            console.log('PRs to update (including merged PR):');
            targetPrNumbers.forEach(prNumber => {
              const pr = targetPulls.find(p => p.number === prNumber);
              const isMerged = prNumber === mergedPrNumber;
              console.log(`- PR #${prNumber}: ${pr.title} ${isMerged ? '(MERGED)' : ''}`);
            });
            
            console.log('Found Open PR Numbers to update:', targetPrNumbers);
            core.setOutput('target_pr_numbers', JSON.stringify(targetPrNumbers));
        env:
          base_branch: ${{ steps.get_pr_details.outputs.base_branch }}
          merged_pr_number: ${{ steps.get_pr_details.outputs.merged_pr_number }}

      - name: Update Target PR Descriptions
        # 更新対象のPRが見つかった場合のみ実行
        if: steps.find_all_open_prs.outputs.target_pr_numbers != '[]'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const targetPrNumbers = JSON.parse(process.env.target_pr_numbers);
            const mergedDesignDocs = JSON.parse(process.env.design_docs);
            
            if (mergedDesignDocs.length === 0) {
              console.log('No design docs found in the merged PR. Skipping update for all target PRs.');
              return; // 設計書リンクが見つからなければ何もしない
            }

            for (const prNumber of targetPrNumbers) {
              try {
                // 対象PRの現在のDescriptionを取得
                const { data: targetPr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                });

                let newTargetPrBody = targetPr.body || '';
                let existingDesignDocs = [];

                // 対象PRに既に「集約設計書一覧」セクションがあるかチェック
                const targetDocSectionMatch = newTargetPrBody.match(/#\s*集約設計書一覧\n([\s\S]*?)(?=\n#|\n---|$)/);
                if (targetDocSectionMatch && targetDocSectionMatch[1]) {
                  const links = targetDocSectionMatch[1].match(/\*\s*\[.*?\]\(https:\/\/docs\.google\.com\/spreadsheets\/d\/.*?\)/g);
                  if (links) {
                    existingDesignDocs = links.map(link => link.trim());
                  }
                }

                // マージされたPRのリンクを既存のリストに追加（重複は避ける）
                const allDesignDocs = [...new Set([...existingDesignDocs, ...mergedDesignDocs])];

                // 更新された設計書一覧セクションを生成
                let updatedDocSection = '# 集約設計書一覧\n\n' + allDesignDocs.join('\n');
                updatedDocSection += `\n\n---`; // 区切り線

                // 対象PRのDescriptionを更新
                if (targetDocSectionMatch) {
                  // 既存のセクションがあれば置き換える
                  newTargetPrBody = newTargetPrBody.replace(targetDocSectionMatch[0], updatedDocSection);
                } else {
                  // なければ追加する
                  newTargetPrBody += '\n\n' + updatedDocSection;
                }

                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  body: newTargetPrBody,
                });
                console.log(`Updated PR #${prNumber} with new design docs.`);
              } catch (error) {
                console.error(`Failed to update PR #${prNumber}: ${error.message}`);
              }
            }
        env:
          target_pr_numbers: ${{ steps.find_all_open_prs.outputs.target_pr_numbers }}
          design_docs: ${{ steps.get_pr_details.outputs.design_docs }}